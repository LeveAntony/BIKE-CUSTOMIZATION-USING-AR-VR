 
@app . route (’/’)
24 def hello ():
25 return ’Server is running ...’
26
27 # Define an endpoint to upload images
28 @app .route (’/ upload ’, methods =[’ POST ’])
29 def upload_image ():
30 # Check if the POST request contains a file
31 if ’file ’ not in request.files:
32 return jsonify ({’error’: ’No file part ’}), 400
33 file = request. files[’file ’]
34
35 # Check if the file is empty
36 if file.filename == ’’:
37 return jsonify ({’ error’: ’No selected file ’}), 400
38
39 # Save the uploaded file to the upload folder
40 filename = os. path .join (app .config [’ UPLOAD_FOLDER ’], file . 
filename )
41 file .save (filename )
42
43 # Print the saved path of the uploaded image
44 saved_path = os. path . abspath (filename )
45 print(’ Image saved at:’, saved_path )
46 pre_process_result = client. predict(
47 saved_path , # filepath in ’Input Image ’ Image component
48 True , # bool in ’Remove Background ’ Checkbox component
49 0.85 , # float (numeric value between 0.5 and 1.0) in ’Foreground 
Ratio ’ Slider component
50 api_name ="/ preprocess"
51 )
52 print( pre_process_result )
53
54 # Perform asynchronous prediction
55 loop = asyncio . new_event_loop ()
56 result = loop .run_until_complete ( predict_async ( pre_process_result
))
57 loop . close ()
58 print(str( result))
59 new_path = shutil. copy(result , "../scene /bikes/")
60 # Return the result as JSON response
61 print( new_path [3:])
62 return jsonify ({’result’: new_path [3:]}) , 200
63
64 # Asynchronous function to perform prediction
65 async def predict_async (saved_path ):
66 # Import gradio_client here to prevent import errors during 
synchronous execution
67
68 result = client. predict(
69 gradio_client . file (saved_path ),
70 256 ,
71 api_name ="/ generate "
72 )
73 return result [0]
74
75 # Run the Flask app
76 if __name__ == ’__main__ ’:

23
6.3.2 index.html
1 <!DOCTYPE html >
2 <html lang=" en" >
3
4 <head >
5 <meta charset=" UTF -8" />
6 <meta name =" viewport" content=" width =device -width , initial -scale =1, 
shrink -to -fit=no" / >
7 <meta http - equiv="x- ua - compatible " content=" ie= edge " />
8 <title >Custom Bikes Garage </title >
9 <!-- Font Awesome -->
10 <link rel=" stylesheet" href=" https :// use .fontawesome . com/releases/ 
v6 .0.0/ css/ all. css" />
11 <!-- Google Fonts Roboto -->
12 <link rel=" stylesheet" href=" https://fonts. googleapis. com / css2 ? 
family= Roboto :wght@ 300 ;400 ;500 ;700& display =swap " />
13 <!-- MDB -->
14 <link rel=" stylesheet" href=" css/ mdb .min . css" />
15 <style >
16 * {
17 box -sizing : border -box;
18 }
19
20 html {
21 font -family: Roboto , sans -serif;
22 }
23
24 body {
25 background - color: #080808 ;
26 color: white ;
27 }
28
29 canvas ,
30 img ,
31 svg {
32 vertical - align : middle ;
33 }
34
35 label {
36 cursor: pointer;
37 display : block;
38
39 >input[ type =" radio "],
40 >input[ type =" checkbox"] {
41 margin -right: 5px;
42 position : relative ;
43 top : -2px;
44 }
45 }
46
47 form {
48 margin - bottom : 20px;

24
49 }
50
51 textarea {
52 resize : vertical;
53 }
54
55 svg {
56 vertical - align : middle ;
57 }
58
59 .sidebar {
60 background - color: #181718 ;
61 float: left;
62 height: 100 vh;
63 overflow -y: auto ;
64 padding : 20 px;
65 position : relative ;
66 width : 250 px;
67 z-index: 1;
68 }
69
70 .main - container {
71 align -items: center;
72 display : flex;
73 height: 100 vh;
74 justify -content: center;
75 margin -left: 250 px;
76 overflow : auto ;
77 }
78
79 .main - container. dark {
80 background - color: #1 e1e1e ;
81 }
82
83 .field +.field {
84 margin -top : 20px;
85 }
86
87 .field > label {
88 margin - bottom : 5px;
89 }
90
91 .input {
92 background - color: #444;
93 border: 0;
94 border -radius: 4px;
95 color: #fff;
96 display : block;
97 font -size : inherit;
98 outline : 0;
99 padding : 10px 14px;
100 width : 100%;
101 cursor: pointer;
102 }
103 </style >
104
105 </ head >
106

25
107 <body >
108 <!--Main Navigation -->
109 <header >
110 <style >
111 #intro {
112 background -image : url("/img/ Hero \ image . png");
113 height: 100 vh;
114 }
115
116 /* Height for devices larger than 576 px */
117 @media (min -width : 992 px) {
118 #intro {
119 margin -top : -58.59 px;
120 }
121 }
122
123 .navbar .nav -link {
124 color: #fff !important;
125 }
126 </style >
127
128 <!-- Navbar -->
129 <nav class=" navbar navbar -expand -lg navbar -dark d- none d-lg -block 
" style ="z- index: 2000;" >
130 <div class=" container -fluid ">
131 <!-- Navbar brand -->
132 <a class=" navbar -brand nav -link" target=" _blank" href=" https
:// mdbootstrap . com /docs/ standard /" >
133 <strong >MDB </ strong >
134 </ a>
135 <button class=" navbar -toggler" type =" button " data -mdb -
collapse -init data -mdb -target="# navbarExample 01 "
136 aria - controls=" navbarExample 01 " aria - expanded =" false " aria -
label=" Toggle navigation ">
137 <i class=" fas fa -bars" ></i>
138 </ button >
139 <div class=" collapse navbar - collapse " id=" navbarExample 01 ">
140 <ul class=" navbar -nav me -auto mb -2 mb -lg -0">
141 <li class=" nav -item active ">
142 <a class=" nav -link" aria - current=" page " href="# intro "> 
Home </a>
143 </ li>
144 <li class=" nav -item ">
145 <a class=" nav -link" href=" https:// www . youtube . com / 
channel/ UC 5CF7 mLQZhvx8 O5GODZAhd A "
146 rel=" nofollow " target=" _blank" ></ a>
147 </ li>
148 <li class=" nav -item ">
149 <a class=" nav -link" href=" https :// mdbootstrap . com /docs/ 
standard /" target=" _blank" ></ a>
150 </ li>
151 </ ul>
152
153 <ul class=" navbar -nav d- flex flex -row ">
154 <!-- Icons -->
155 <li class=" nav -item me -3 me -lg -0">
156 <a class=" nav -link" href="" rel=" nofollow " target="
_blank" >

26
157 <i class=" fab fa -youtube "></i>
158 </ a>
159 </ li>
160 <li class=" nav -item me -3 me -lg -0">
161 <a class=" nav -link" href=" https :// www .facebook . com /
mdbootstrap " rel=" nofollow "
162 target=" _blank" >
163 <i class=" fab fa -facebook -f" ></i>
164 </ a>
165 </ li>
166 <li class=" nav -item me -3 me -lg -0">
167 <a class=" nav -link" href=" https://twitter. com/
MDBootstrap " rel=" nofollow " target=" _blank" >
168 <i class=" fab fa -twitter" ></i>
169 </ a>
170 </ li>
171 <li class=" nav -item me -3 me -lg -0">
172
173
<a class=" nav -link" href=" https:// github . com /
mdbootstrap /mdb -ui- kit" rel=" nofollow "
target=" _blank" >
174 <i class=" fab fa -github "></i>
175 </ a>
176 </ li>
177 </ ul>
178 </ div >
179 </ div >
180 </ nav >
181 <!-- Navbar -->
182
183 <!-- Background image -->
184 <div id=" intro " class=" bg -image shadow -2-strong ">
185 <div class=" mask" style =" background -color: rgba (0, 0, 0, 0.8);"
>
186 <div class=" container d-flex align -items-center justify -
content - center text - center h -100 ">
187 <div class=" text -white " data -mdb -theme =" dark" >
188 <h1 class="mb -3">The Garage </h1 >
189 <h5 class=" mb -4">Best & free guide of customizing bike 
design </ h5 >
190 <a class=" btn btn -outline -light btn -lg m-2" data -mdb -
ripple -init href="" role =" button "
191 rel=" nofollow " target=" _blank" >Start
192 Building </ a>
193 <a class=" btn btn-outline -light btn-lg m-2" data -mdb -
ripple -init href="" target=" _blank"
194 role =" button ">About Us</ a>
195 </ div >
196 </ div >
197 </ div >
198 </ div >
199 <!-- Background image -->
200 </ header >
201 <!--Main Navigation -->
202
203
204
205 <!--Main layout -->
206 <main class=" mt -5">

27
207 <div class=" container" >
208 <!--Section : Content -->
209 <section >
210 <div class=" row ">
211 <div class=" col-md -6 gx -5 mb -4">
212 <div class=" bg -image hover -overlay shadow -2 -strong " data -
mdb -ripple -init
213 data -mdb -ripple - color=" light" >
214 <img src="/ img/led -headlamp 1. png" class=" img -fluid " />
215 <a href="#!" >
216 <div class=" mask" style =" background - color: rgba (251 , 
251 , 251 , 0.15);" ></ div >
217 </ a>
218 </ div >
219 </ div >
220
221 <div class=" col-md -6 gx -5 mb -4">
222 <h4 ><strong >Customizing Own Motorcycle </strong ></ h4 >
223 <p class=" text -muted ">
224 Personalizing a motorcycle is a thrilling journey of 
creativity and self -expression . For
225 many riders , their motorcycle is an extension of their 
personality , and customizing it
226 allows them to showcase their unique style and taste . 
Whether i t s a total overhaul or
227 subtle tweaks , motorcycle customization opens a world 
of possibilities to transform a
228 factory model into a one -of-a- kind ride . In this 
comprehensive guide , we delve into various
229 motorcycle customization ideas , providing 
inspiration and practical tips to make your bike
230 truly yours.
231 </ p>
232 <p><strong >The Paint Job </strong ></ p>
233 <p class=" text -muted ">
234 A custom paint job can dramatically change your 
m o t o r c y c l e s appearance , making it a
235 powerful way to express your personal style . Options 
range from a simple color change to
236 intricate designs or murals.
237 </ p>
238 </ div >
239 </ div >
240 </ section >
241 <!--Section : Content -->
242 <section >
243 <div class=" row ">
244 <div class=" col-md -6 gx -5 mb -4">
245 <h4 ><strong >The Customizable Parts </strong ></ h4 >
246 <p class=" text -muted ">
247 Custom seats can drastically improve riding comfort and 
the overall look of your motorcycle .
248 Custom seats can be tailored to your body shape , riding 
style , and desired aesthetics. <br>
249 Wheels can significantly impact a m o t o r c y c l e s 
handling , performance , and appearance .
250 Options include alloy wheels for a modern sporty look , 
wire -spoke wheels for a retro or

28
251 classic style , and even custom designs. <br>
252 Accessories offer endless possibilities for 
personalization . Custom handlebars can change
253 your riding position and b i k e s look. Mirrors , grips, 
and levers can be swapped for versions
254 that better match your style . Personalized decals , 
badges , or tank pads can add a unique
255 touch .
256 </ p>
257
258
259 <p>
260 <h2 ><strong > The Joy of Customization </strong ></ h2 >
261 </ p>
262
263 <p class=" text -muted ">
264 T h e r e s a certain joy and satisfaction in riding a 
motorcycle t h a t s been customized
265 to your
266 liking . I t s not just about having a bike that stands 
out from the crowd i t s
267 about the
268 sense of ownership and connection that comes from 
knowing your motorcycle inside and
269 out. <br>
270
271 In conclusion , motorcycle customization is a journey of 
creativity , learning , and
272 self - expression . Whether y o u re a seasoned rider 
looking to add a personal touch to
273 your
274 ride or a newbie wanting to make your first bike truly 
your own , the world of
275 motorcycle
276 customization is full of possibilities waiting to be 
explored .
277 </ p>
278 </ div >
279 <div class=" col-md -6 gx -5 mb -4">
280 <div class=" bg -image hover -overlay shadow -2 -strong " data -
mdb -ripple -init
281 data -mdb -ripple - color=" light" >
282 <img src="/img/ cast -alloy -wheels 1.png" class=" img -
fluid " / >
283 <a href="#!" >
284 <div class=" mask" style =" background - color: rgba (251 , 
251 , 251 , 0.15);" ></ div >
285 </ a>
286 </ div >
287 </ div >
288 </ div >
289 </ section >
290
291 <hr class=" my -5" />
292 <div class=" sidebar" >
293 <form >
294 <div class=" field ">
295 <input type =" button " name =" color" class=" input" value ="

29
Full Screen " id=" center - view ">
296 </ div >
297 <div class=" field ">
298 <input type =" button " name =" color" class=" input" value =" 
Change Bike " id=" first -feature " >
299 </ div >
300
301 <div class=" field ">
302 <input type =" color" name =" color" class=" input" value =" 
Change Color" id=" colorPicker" >
303 </ div >
304
305 <div class=" field ">
306 <input type =" button " name =" color" class=" input" value =" 
Change Color" id=" second -feature ">
307 </ div >
308
309 <div class=" field ">
310 <input type =" file " accept=" image /*" name =" color" class=" 
input" id=" bike -image ">
311 </ div >
312
313 <div class=" field ">
314 <input type =" button " name =" color" class=" input" value =" 
Upload Bike " id=" upload -bike ">
315 </ div >
316
317 </ form >
318 </ div >
319 <div class=" main - container dark" id=" container" >
320 </ div >
321
322 <hr class=" my -5" />
323 <!--Section : Content -->
324 <section class=" text - center" >
325 <h4 class=" mb -5 " ><strong ></ strong ></ h4 >
326
327 <div class=" row ">
328 <div class=" col-lg -4 col-md -12 mb -4">
329 <div class=" card ">
330 <div class=" bg -image hover -overlay " data -mdb -ripple -
init data -mdb -ripple -color=" light" >
331 <img src="/img/ gallery -13. png" class=" img -fluid " />
332 <a href="#!" >
333 <div class=" mask" style =" background - color: rgba 
(251 , 251 , 251 , 0.15);" ></ div >
334 </ a>
335 </ div >
336 </ div >
337 </ div >
338
339 <div class=" col-lg -4 col-md -6 mb -4">
340 <div class=" card ">
341 <div class=" bg -image hover -overlay " data -mdb -ripple -
init data -mdb -ripple -color=" light" >
342 <img src="/img/ gallery -15. png" class=" img -fluid " />
343 <a href="#!" >
344 <div class=" mask" style =" background - color: rgba

30
(251 , 251, 251, 0.15);" ></ div >
345 </ a>
346 </ div >
347 </ div >
348 </ div >
349
350 <div class=" col-lg -4 col-md -6 mb -4">
351 <div class=" card ">
352 <div class=" bg -image hover -overlay " data -mdb -ripple -
init data -mdb -ripple - color=" light" >
353 <img src="/img/ gallery -2. png" class=" img -fluid " />
354 <a href="#!" >
355 <div class=" mask" style =" background - color: rgba 
(251 , 251 , 251 , 0.15);" ></ div >
356 </ a>
357 </ div >
358 </ div >
359 </ div >
360 <div class=" col-lg -4 col-md -6 mb -4">
361 <div class=" card ">
362 <div class=" bg -image hover -overlay " data -mdb -ripple -
init data -mdb -ripple -color=" light" >
363 <img src="/img/ gallery -21. png" class=" img -fluid " />
364 <a href="#!" >
365 <div class=" mask" style =" background - color: rgba 
(251 , 251 , 251 , 0.15);" ></ div >
366 </ a>
367 </ div >
368 </ div >
369 </ div >
370 <div class=" col-lg -4 col-md -6 mb -4">
371 <div class=" card ">
372 <div class=" bg -image hover -overlay " data -mdb -ripple -
init data -mdb -ripple -color=" light" >
373 <img src="/img/ gallery -6. png" class=" img -fluid " />
374 <a href="#!" >
375 <div class=" mask" style =" background - color: rgba 
(251 , 251 , 251 , 0.15);" ></ div >
376 </ a>
377 </ div >
378 </ div >
379 </ div >
380 <div class=" col-lg -4 col-md -6 mb -4">
381 <div class=" card ">
382 <div class=" bg -image hover -overlay " data -mdb -ripple -
init data -mdb -ripple -color=" light" >
383 <img src="/img/ gallery -9. png" class=" img -fluid " />
384 <a href="#!" >
385 <div class=" mask" style =" background - color: rgba 
(251 , 251 , 251 , 0.15);" ></ div >
386 </ a>
387 </ div >
388 </ div >
389 </ div >
390 </ div >
391 </ section >
392 <!--Section : Content -->
393

31
394 <hr class=" my -5" />
395
396 <!--Section : Content -->
397 <section class=" mb -5">
398 <h4 class=" mb -5 text - center" ><strong >For more info contact us
</strong ></ h4 >
399
400 <div class=" row d- flex justify -content - center" >
401 <div class=" col -md -6 ">
402 <form >
403 <!-- 2 column grid layout with text inputs for the 
first and last names -->
404 <div class=" row mb -4">
405 <div class=" col" >
406 <div class=" form - outline " data -mdb -input -init >
407 <input type =" text" id=" form3Example 1 " class=" form
-control" />
408 <label class=" form -label" for=" form3Example 1 "> 
First name </label >
409 </ div >
410 </ div >
411 <div class=" col" >
412 <div class=" form - outline " data -mdb -input -init >
413 <input type =" text" id=" form3Example 2 " class=" form
-control" />
414 <label class=" form -label" for=" form3Example 2 "> 
Last name </label >
415 </ div >
416 </ div >
417 </ div >
418
419 <!-- Email input -->
420 <div class=" form -outline mb -4 " data -mdb -input -init >
421 <input type =" email" id=" form3Example 3 " class=" form -
control" / >
422 <label class=" form -label" for=" form3Example 3 ">Email 
address </label >
423 </ div >
424
425 <!-- Password input -->
426 <div class=" form -outline mb -4 " data -mdb -input -init >
427 <input type =" password " id=" form3Example 4 " class=" form
-control" />
428 <label class=" form -label" for=" form3Example 4 "> 
Password </label >
429 </ div >
430
431 <!-- Checkbox -->
432 <div class=" form - check d- flex justify - content - center mb
-4 ">
433 <input class=" form - check -input me -2" type =" checkbox" 
value ="" id=" form2Example 3 "
434 checked />
435 <label class=" form - check -label" for=" form2Example 3 ">
436 Subscribe to our newsletter
437 </label >
438 </ div >
439

32
1
6
6.3.3 main.js
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
</ form >
</ main >
476

33
9 const camera = new THREE . Perspective Camera (75, window . innerWidth / 
window .innerHeight , 0.1, 1000);
10 const loader = new GLTFLoader ();
11 const obj_loader = new OBJLoader ();
12
13 const renderer = new THREE .WebGLRenderer ();
14 renderer. setSize (window . innerWidth , window . innerHeight);
15 const parentNode = document. getElementById (" container");
16
17 parentNode . append Child (renderer. domElement);
18 const controls = new OrbitControls ( camera , renderer. domElement);
19
20
21
22 const bikeData = await loader. loadAsync(’scene /bikes /2020
_suzuki_sv650 _motorcycle . glb ’);
23 const parking Data = await loader. load Async(’ scene /parking_garage .glb 
’);
24 const workbench Data = await loader. loadAsync(’scene /old_work_bench . 
glb ’);
25
26
27 camera .position .z = 5;
28 scene . add ( parking Data .scene . children [0]);
29 scene . add ( bikeData .scene . children [0]);
30
31 await loader. load (
32 ’scene / parking_garage . glb ’,
33 function (gltf) {
34 scene . add ( gltf.scene );
35 });
36
37 // await loader. load (
38 // ’scene /2020 _suzuki_sv650 _motorcycle . glb ’,
39 // function (gltf) {
40 // scene . add ( gltf. scene );
41 // });
42
43 // console . log( workbench Data .scene . children [0]);
44
45 let move Mouse = new THREE . Vector2 ();
46
47 window . add EventListener (" mousemove ", ( event) => {
48 move Mouse .x = (event. clientX / window .innerWidth ) * 2 - 1;
49 moveMouse .y = -(event. clientY / window .innerHeight) * 2 + 1;
50
51 camera .position .x = move Mouse .x;
52 camera .position .y = move Mouse .y;
53 controls. update ();
54
55 renderer. render( scene , camera );
56 });
57 renderer. render(scene , camera );
58
59 const centerView Button = document. getElementById (" center - view ");
60 /* Get the documentElement (<html >) to display the page in fullscreen
*/
61 var elem = document. body;

34
62
63 /* View in fullscreen */
64 function open Fullscreen () {
65 if (elem .requestFullscreen ) {
66 elem .requestFullscreen ();
67 } else if (elem.webkitRequestFullscreen ) { /* Safari */
68 elem . webkitRequestFullscreen ();
69 } else if (elem .msRequestFullscreen ) { /* IE11 */
70 elem . msRequestFullscreen ();
71 }
72 }
73 centerView Button . add EventListener (" click", ( event) => {
74 open Fullscreen ();
75 })
76 const ambientLight = new THREE .AmbientLight (0 xffffff , 0.4);
77 scene . add ( ambientLight);
78
79 const dirLight = new THREE .DirectionalLight (0xefefff , 1.5);
80 dirLight. position .set(10 , 10, 10);
81 scene . add ( dirLight);
82
83 function * getBikesModel () {
84 yield " scene / bikes/ kawasaki_ninja_h 2r. glb ";
85 yield " scene / bikes/ three_cylinder_naked_street_bike . glb ";
86 }
87
88 // Calling the Generate Function
89 let gen = getBikesModel ();
90
91 const firstFeature Button = document. getElementById (" first -feature ");
92 firstFeature Button . add EventListener (" click", async (event) => {
93 var bike Child = scene . children [1];
94 scene .remove ( bike Child );
95 await loader. load (
96 gen .next (). value ,
97 function (gltf) {
98 scene . add ( gltf.scene );
99 gltf.scene .position .set(1 , -0.5, 0);
100 });
101 })
102
103
104 let selected Color = new THREE .Color (0 xffffff);
105 function handle ColorChange (event) {
106 selected Color .set( event. target. value );
107 }
108 const colorPicker = document. getElementById (’ colorPicker ’);
109 colorPicker. add EventListener (’ change ’, handle ColorChange );
110
111 renderer. domElement. add EventListener (’ click ’, (event) => {
112 var mouse = {
113 x: (event. clientX / window .innerWidth ) * 2 - 1,
114 y: -(event. clientY / window .innerHeight) * 2 + 1,
115 };
116 var objChild = scene . children [1];
117 var raycaster = new THREE .Raycaster ();
118 raycaster. setFrom Camera (mouse , camera );
119 var intersects = raycaster. intersectObjects (scene . children , true );

35
120 console . log( intersects)
121 if (intersects. length > 0) {
122 const clickedObject = intersects [0]. object;
123 if (clickedObject .material) {
124 clicked Object .material. color. copy( selected Color );
125 console .log(" color should change ")
126 }
127 }
128 });
129
130 function * getDifferentColorBikesModel () {
131 yield " scene / bikes/ kawasaki_ninja_h 2r. glb ";
132 yield " scene /bikes/ scene123 ";
133 }
134
135
136 // Calling the Generate Function
137 let gdcb = getDifferentColorBikesModel ();
138
139 const second Feature Button = document. getElementById (" second -feature ")
;
140 second Feature Button .add EventListener (" click", async (event) => {
141 var bike Child = scene . children [1];
142 scene .remove ( bike Child );
143 await loader. load (
144 gdcb .next (). value ,
145 function (gltf) {
146 scene . add ( gltf.scene );
147 gltf.scene .position .set(1 , -0.5, 0);
148 });
149 })
150
151 // code for handling upload new bike button
152 const upload Bike Button = document. getElementById (" upload -bike ");
153 upload Bike Button . add EventListener (’ click ’, async ( event) => {
154 var file Input = document. getElementById (’ bike -image ’);
155 var file = fileInput.files[0];
156 var formData = new FormData ();
157 formData .append (’file ’, file );
158
159 // Send a POST request to the / upload endpoint
160 await fetch (’ http :// 127 .0 .0.1 :5000 / upload ’, {
161 method : ’POST ’,
162 body: formData
163 })
164 .then (response => response .json ())
165 .then (async data => {
166 // console .log(’ Saved path :’, data .result);
167 // alert(’ Image uploaded successfully ! Saved path : ’ + data . 
result);
168 var bike Child = scene . children [1];
169 scene .remove ( bike Child );
170 await obj_loader. load (
171 data .result ,
172 function (gltf) {
173 scene . add ( gltf);
174 });
175 })